def gitCredentialsId = 'WhiteSasha_SB_pass'
def gitUrl = 'https://github.com/WhiteSasha/maven_test.git'
def fromBranch = params.PULL_REQUEST_FROM_BRANCH
    // -e - Вывод ошибок, -X Вывод дебаг логов
    // Сборка с тестами  и сонаром
def mvnTargetsUnit = 'clean -am install sonar:sonar -P unit-test -e -X'
    // сборка без юнит тестов и сонара
//def mvnTargetsUnit = 'clean install -DskipTests=true'
    // сборка с тестами
//def  mvnTargetsUnit = 'clean install'







def mvnOptions = []
def gitBranches = [[name: fromBranch]]
def gitExtensions = []
def mavenSettingPath = 'configuration/sigma/settings.xml'
def mavenSettingSecurityPath = 'configuration/sigma/settings-security.xml'
def mavenVersion = 'Maven 3.6.3'
def javaVersion = 'openjdk-11'

timestamps {
    ansiColor('xterm') {
        timeout(5) {
            node {
                stage('PREPARE') {
                    echo "\u001B[32 Git checkout \u001B[m"
                    checkout changelog: true, poll: true, scm: [
                            $class                           : 'GitSCM',
                            branches                         : gitBranches,
                            doGenerateSubmoduleConfigurations: false,
                            extensions                       : gitExtensions,
                            gitTool                          : 'Default',
                            submoduleCfg                     : [],
                            userRemoteConfigs                : [[credentialsId: gitCredentialsId, url: gitUrl]]]
//                    notifyBitbucket 'INPROGRESS'
                }

                stage('UNIT-TEST') {
                    echo "\u001B[32m Maven сборка\u001B[m"
                    echo "BRANCH " + fromBranch
                    sh "echo '!!!=== Тут должен быть maven ===!!!'"
//                    sh "mvn -version"
                    
                    withMaven(jdk: javaVersion, maven: mavenVersion) {
                            sh "mvn --help"
//                            sh "mvn clean -am install -e -X"
                        }
/*
                    try {
                        mvnOptions << "-Dsonar.branch.name=$fromBranch"
                        mvnOptions << "-Dsettings.security=$mavenSettingSecurityPath"
                        withMaven(jdk: javaVersion, maven: mavenVersion, mavenSettingsFilePath: mavenSettingPath) {
                            sh "mvn ${mvnOptions.join(' ')} $mvnTargetsUnit"
                        }
                        notifyBitbucket 'SUCCESS'
                    } catch (err) {
                        notifyBitbucket 'FAILED'
                        echo err
                    }
 */              
                }
 
            }
        }
    }
}

def notifyBitbucket(String state) {
    if ('SUCCESS' == state || 'FAILED' == state) {
        currentBuild.result = state
    }

    step([$class                       : 'StashNotifier',
          commitSha1                   : '',
          credentialsId                : 'WhiteSasha_SB_pass',
          disableInprogressNotification: false,
          considerUnstableAsSuccess    : false,
          ignoreUnverifiedSSLPeer      : false,
          includeBuildNumberInKey      : false,
          prependParentProjectKey      : false,
          projectKey                   : '',
          stashServerBaseUrl           : 'https://stash.sigma.sbrf.ru/'])
}